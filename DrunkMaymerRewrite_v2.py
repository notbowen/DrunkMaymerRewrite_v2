I0RhbmsgTWVtZXIgQXV0b2Zhcm0sIHYyCiNNYWRlIGJ5IHdIbyM2OTMzCiNSZXBvcnQgYW55IGVycm9yIHRvIG1lIGhlaGUsIHRyeSBhbmQgdGFrZSBhIHNjcmVlbnNob3Qgb2YgdGhlIGVycm9yIHRvbwoKIiIiCj09PT09IEF2YWlsYWJsZSBGdW5jdGlvbnMgPT09PT0KMS4gQXV0byBiZWcKMi4gQXV0byBkaWcKMy4gQXV0byBmaXNoCjQuIEF1dG8gaHVudAo1LiBBdXRvIGRlcG9zaXQKNi4gU2F2ZSB0b2tlbiBhbmQgc2V0dGluZ3MKNy4gU2VsbGluZyBpdGVtcwo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cgo9PT09PSBGdW5jdGlvbnMgdG8gYmUgYWRkZWQgPT09PT0KMS4gU2VhcmNoLCBhbmQgYWxsIGJ1dHRvbiByZWxhdGVkIGN1cnJlbmN5IGNvbW1hbmRzIChvbmNlIGkgZmlndXJlIG91dCBIT1cgVEhPU0UgREFNTiBCVVRUT05TIFdPUkspCjIuIHdvcmsgKG1heWJlKQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIiIiCgojTGlicmFyaWVzCmltcG9ydCBjdHlwZXMKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBqc29uCmZyb20gb3MgaW1wb3J0IGVycm9yCmltcG9ydCBzeXMKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmVxdWVzdHMKCmZyb20ganNvbi5kZWNvZGVyIGltcG9ydCBKU09ORGVjb2RlRXJyb3IKZnJvbSB0ZXJtY29sb3IgaW1wb3J0IGNvbG9yZWQKCiN2YXJpYWJsZXMKc2V0dGluZ3MgPSBOb25lCmNvbG9yID0gTm9uZQoKYmVnVGltZXIgPSA1NQpkaWdUaW1lciA9IDUwCmZpc2hUaW1lciA9IDQ3Cmh1bnRUaW1lciA9IDQyCmRlcFRpbWVyID0gMTIwCgpleGl0UHJvZ3JhbSA9IEZhbHNlCgppc0JlZ2dpbmcgPSBpc0RpZ2dpbmcgPSBpc0Zpc2hpbmcgPSBpc0h1bnRpbmcgPSBpc0RlcG9zaXRpbmcgPSBpc1NlbGxpbmcgPSBGYWxzZQoKdG9rZW4gPSBpc0JlZyA9IGlzRGlnID0gaXNGaXNoID0gaXNIdW50ID0gaXNEZXAgPSBpc1NlbGwgPSBjaGFubmVsX2lkID0gTm9uZQoKcnVudGltZUVycm9ycyA9IFtdCnRvUHJpbnQgPSBbXQoKI2NvbG9yIGNsYXNzLCB0byBmb3JtYXQgdGhlIG1lc3NhZ2UKY2xhc3MgQ29sb3I6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgcGFzcwoKICAgIGRlZiBpbml0KHNlbGYpOgogICAgICAgIHJldHVybiAiWyIgKyBjb2xvcmVkKCdJTklUJywgJ3llbGxvdycpICsgJ10gJwoKICAgIGRlZiBwb3NpdGl2ZShzZWxmKToKICAgICAgICByZXR1cm4gIlsiICsgY29sb3JlZCgnKycsICdncmVlbicpICsgJ10gJwoKICAgIGRlZiBuZWdhdGl2ZShzZWxmKToKICAgICAgICByZXR1cm4gIlsiICsgY29sb3JlZCgnLScsICdyZWQnKSArICddICcKCiAgICBkZWYgaGlnaGxpZ2h0KHNlbGYsIGNvbnRlbnQpOgogICAgICAgIHJldHVybiBjb2xvcmVkKGNvbnRlbnQsICJ5ZWxsb3ciKQoKICAgIGRlZiB0aW1lcihzZWxmLCB0aW1lKToKICAgICAgICBpZiB0aW1lID09ICJSVU5OSU5HIjoKICAgICAgICAgICAgcmV0dXJuICJbIiArIGNvbG9yZWQoIlJVTk5JTkciLCAiZ3JlZW4iKSArICJdICIKICAgICAgICBlbGlmIHRpbWUgPT0gMDoKICAgICAgICAgICAgcmV0dXJuICJbIiArIGNvbG9yZWQoIlJVTk5JTkciLCAiZ3JlZW4iKSArICJdICIKICAgICAgICBlbGlmIHRpbWUgPT0gIkRJU0FCTEVEIjoKICAgICAgICAgICAgcmV0dXJuICJbIiArIGNvbG9yZWQoIkRJU0FCTEVEIiwgInJlZCIpICsgIl0gIgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiAiWyIgKyBjb2xvcmVkKHN0cih0aW1lKSArICJzIiwgInllbGxvdyIpICsgIl0gIgoKI0F1dG9mYXJtIGNsYXNzCmNsYXNzIEF1dG9GYXJtZXI6CiAgICBkZWYgX19pbml0X18oc2VsZiwgdG9rZW4sIGNoYW5uZWxfaWQpOgogICAgICAgIHNlbGYuY2hhbm5lbF9pZCA9IGNoYW5uZWxfaWQKICAgICAgICBzZWxmLmhlYWRlcnMgPSB7J0F1dGhvcml6YXRpb24nOiB0b2tlbn0KCiAgICBkZWYgYmVnKHNlbGYpOgogICAgICAgIGJUaHJlYWQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1zZWxmLnNlbmQsIGFyZ3M9KCJwbHMgYmVnIiwpKQogICAgICAgIGJUaHJlYWQuZGFlbW9uID0gVHJ1ZQogICAgICAgIGJUaHJlYWQuc3RhcnQoKQoKICAgIGRlZiBkaWcoc2VsZik6CiAgICAgICAgZFRocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PXNlbGYuc2VuZCwgYXJncz0oInBscyBkaWciLCkpCiAgICAgICAgZFRocmVhZC5kYWVtb24gPSBUcnVlCiAgICAgICAgZFRocmVhZC5zdGFydCgpCgogICAgZGVmIGZpc2goc2VsZik6CiAgICAgICAgZlRocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PXNlbGYuc2VuZCwgYXJncz0oInBscyBmaXNoIiwpKQogICAgICAgIGZUaHJlYWQuZGFlbW9uID0gVHJ1ZQogICAgICAgIGZUaHJlYWQuc3RhcnQoKQoKICAgIGRlZiBodW50KHNlbGYpOgogICAgICAgIGhUaHJlYWQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1zZWxmLnNlbmQsIGFyZ3M9KCJwbHMgaHVudCIsKSkKICAgICAgICBoVGhyZWFkLmRhZW1vbiA9IFRydWUKICAgICAgICBoVGhyZWFkLnN0YXJ0KCkKCiAgICBkZWYgZGVwKHNlbGYpOgogICAgICAgIGRlcFRocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PXNlbGYuc2VuZCwgYXJncz0oInBscyBkZXAgYWxsIiwpKQogICAgICAgIGRlcFRocmVhZC5kYWVtb24gPSBUcnVlCiAgICAgICAgZGVwVGhyZWFkLnN0YXJ0KCkKCiAgICBkZWYgc2VsbChzZWxmKToKICAgICAgICBzZWxsVGhyZWFkID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9c2VsZi5zZWxsX2l0ZW0pCiAgICAgICAgc2VsbFRocmVhZC5kYWVtb24gPSBUcnVlCiAgICAgICAgc2VsbFRocmVhZC5zdGFydCgpCgogICAgZGVmIHNlbGxfaXRlbShzZWxmKToKICAgICAgICBnbG9iYWwgaXNTZWxsaW5nCgogICAgICAgIGlzU2VsbGluZyA9IFRydWUKCiAgICAgICAgdGltZS5zbGVlcCgzKSAjd2FpdCBmb3Igc29tZSB0aW1lIHRvIGdldCB0aGUgcmVzcG9uc2UgbXNnCiAgICAgICAgciA9IHJlcXVlc3RzLmdldChmJ2h0dHBzOi8vZGlzY29yZGFwcC5jb20vYXBpL3Y2L2NoYW5uZWxzL3tzZWxmLmNoYW5uZWxfaWR9L21lc3NhZ2VzJywgaGVhZGVycz1zZWxmLmhlYWRlcnMpCiAgICAgICAgCiAgICAgICAgZGF0YSA9IHIuanNvbigpCgogICAgICAgIGluZGV4ID0gMAogICAgICAgIHdoaWxlIFRydWU6ICNjaGVjayBpZiBtZXNzYWdlIHdhcyBzZW50IGJ5IGRhbmsKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWYgZGF0YVtpbmRleF1bJ2F1dGhvciddWydpZCddID09ICcyNzA5MDQxMjY5NzQ1OTA5NzYnIGFuZCBkYXRhW2luZGV4XVsnY29udGVudCddLmxvd2VyKCkuc3RhcnRzd2l0aCgibG1hbyIpIG9yIGRhdGFbaW5kZXhdWydjb250ZW50J10ubG93ZXIoKS5zdGFydHN3aXRoKCJ5b3UiKToKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgaW5kZXggKz0gMQogICAgICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICAgICAgICAgIGxvZ1J1bnRpbWVFcnJvcigiQ291bGRuJ3QgZmluZCBEYW5rIE1lbWVyJ3MgbWVzc2FnZS4iKQogICAgICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIGNvbnRlbnQgPSByLmpzb24oKVtpbmRleF1bJ2NvbnRlbnQnXQoKICAgICAgICBpZiAnbm90aGluZycgaW4gY29udGVudC5sb3dlcigpOgogICAgICAgICAgICBpc1NlbGxpbmcgPSBGYWxzZQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIAogICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNwbGl0KCIgIikgI3BhcnNlIHRoZSBkYW5rIG1lbWVyIGRhdGEgdG8gZXh0cmFjdCBzdHVmZiB0byBzZWxsCiAgICAgICAgCiAgICAgICAgZm9yIGkgaW4gY29udGVudDoKICAgICAgICAgICAgaWYgaS5pc2RpZ2l0KCk6CiAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gY29udGVudC5pbmRleChpKQogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsbE51bWJlciA9IGNvbnRlbnRbc3RhcnRJbmRleF0KICAgICAgICAgICAgc2VsbE5hbWUgPSBjb250ZW50W3N0YXJ0SW5kZXggKyAxXQogICAgICAgIGV4Y2VwdCBOYW1lRXJyb3I6CiAgICAgICAgICAgIGxvZ1J1bnRpbWVFcnJvcigiQ291bGRuJ3QgZmluZCBzZWxsIGRhdGEsIHNraXBwZWQgc2VsbGluZy4iKQogICAgICAgICAgICBpc1NlbGxpbmcgPSBGYWxzZQogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgaWYgc2VsbE5hbWUubG93ZXIoKS5zdGFydHN3aXRoKCJiYW5rIik6CiAgICAgICAgICAgIGlzU2VsbGluZyA9IEZhbHNlCiAgICAgICAgICAgIHJldHVybgoKICAgICAgICBzZWxmLnNlbmQoInBscyBzZWxsICIgKyBzZWxsTmFtZSArICIgIiArIHNlbGxOdW1iZXIpCgogICAgICAgIGlzU2VsbGluZyA9IEZhbHNlCgogICAgZGVmIHNlbmQoc2VsZiwgY29udGVudCk6CiAgICAgICAgZ2xvYmFsIGlzQmVnZ2luZywgaXNEaWdnaW5nLCBpc0Zpc2hpbmcsIGlzSHVudGluZywgaXNEZXBvc2l0aW5nLCBleGl0UHJvZ3JhbQoKICAgICAgICBhcmcgPSBjb250ZW50LnNwbGl0KCIgIilbMV0KCiAgICAgICAgaWYgYXJnID09ICJiZWciOiBpc0JlZ2dpbmcgPSBUcnVlCiAgICAgICAgaWYgYXJnID09ICJkaWciOiBpc0RpZ2dpbmcgPSBUcnVlCiAgICAgICAgaWYgYXJnID09ICJmaXNoIjogaXNGaXNoaW5nID0gVHJ1ZQogICAgICAgIGlmIGFyZyA9PSAiaHVudCI6IGlzSHVudGluZyA9IFRydWUKICAgICAgICBpZiBhcmcgPT0gImRlcCI6IGlzRGVwb3NpdGluZyA9IFRydWUKCiAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoZidodHRwczovL2Rpc2NvcmRhcHAuY29tL2FwaS92Ni9jaGFubmVscy97c2VsZi5jaGFubmVsX2lkfS9tZXNzYWdlcycsIGhlYWRlcnM9c2VsZi5oZWFkZXJzLCBqc29uPXsnY29udGVudCc6IGNvbnRlbnR9KQogICAgICAgIGlmIHIuc3RhdHVzX2NvZGUgIT0gMjAwOgogICAgICAgICAgICBwcmludChjb2xvci5uZWdhdGl2ZSgpICsgIkVycm9yLCBkaXNjb3JkIHJldHVybmVkIGFuIGVycm9yIHJlc3BvbnNlLiIpCiAgICAgICAgICAgIHByaW50KGNvbG9yLm5lZ2F0aXZlKCkgKyAiTG9nOiAiICsgc3RyKHIuanNvbigpKSkKICAgICAgICAgICAgcHJpbnQoY29sb3IubmVnYXRpdmUoKSArICJJZiBpdCBzYXlzIFwiVW5hdXRob3JpemVkXCIsIGNoZWNrIHlvdXIgdG9rZW4gb3IgY2hhbm5lbCBpZC4iKQogICAgICAgICAgICBwcmludChjb2xvci5uZWdhdGl2ZSgpICsgIlF1aXR0aW5nIHByb2dyYW0uLi4iKQogICAgICAgICAgICBleGl0UHJvZ3JhbSA9IFRydWUKCiAgICAgICAgaWYgYXJnID09ICJiZWciOiBpc0JlZ2dpbmcgPSBGYWxzZQogICAgICAgIGlmIGFyZyA9PSAiZGlnIjogaXNEaWdnaW5nID0gRmFsc2UKICAgICAgICBpZiBhcmcgPT0gImZpc2giOiBpc0Zpc2hpbmcgPSBGYWxzZQogICAgICAgIGlmIGFyZyA9PSAiaHVudCI6IGlzSHVudGluZyA9IEZhbHNlCiAgICAgICAgaWYgYXJnID09ICJkZXAiOiBpc0RlcG9zaXRpbmcgPSBGYWxzZQoKI3NldHRpbmdzIGNsYXNzCmNsYXNzIFNldHRpbmdzSGFuZGxlcjoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBwYXNzCgogICAgZGVmIHJlYWQoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aXRoIG9wZW4oInNldHRpbmdzLmpzb24iLCAiciIpYXMgZjoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0ganNvbi5sb2FkKGYpCiAgICAgICAgICAgICAgICBleGNlcHQgSlNPTkRlY29kZUVycm9yOgogICAgICAgICAgICAgICAgICAgIHJldHVybiAiS2V5IEVycm9yIgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHNlbGYuc2F2ZVZhcmlhYmxlcyhvcHRpb25zWyd0b2tlbiddLCBvcHRpb25zWydiZWcnXSwgb3B0aW9uc1snZGlnJ10sIG9wdGlvbnNbJ2Zpc2gnXSwgb3B0aW9uc1snaHVudCddLCBvcHRpb25zWydkZXAnXSwgb3B0aW9uc1snc2VsbCddLCBvcHRpb25zWydjaGFubmVsX2lkJ10pCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMKICAgICAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIktleSBFcnJvciIKICAgICAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgICAgIHJldHVybiAiRmlsZSBub3QgZm91bmQiCgogICAgZGVmIHdyaXRlKHNlbGYsIHRva2VuLCBiZWcsIGRpZywgZmlzaCwgaHVudCwgZGVwLCBzZWxsLCBjaGFubmVsX2lkKToKICAgICAgICBzZXR0aW5nID0geyJ0b2tlbiI6IHRva2VuLCAiYmVnIjogYmVnLCAiZGlnIjogZGlnLCAiZmlzaCI6IGZpc2gsICJodW50IjogaHVudCwgImRlcCI6IGRlcCwgInNlbGwiOiBzZWxsLCJjaGFubmVsX2lkIjogY2hhbm5lbF9pZH0KICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3Blbigic2V0dGluZ3MuanNvbiIsICJ4IilhcyBmOgogICAgICAgICAgICAgICAganNvbi5kdW1wKHNldHRpbmcsIGYpCiAgICAgICAgICAgICAgICBmLmNsb3NlKCkKICAgICAgICBleGNlcHQgRmlsZUV4aXN0c0Vycm9yOgogICAgICAgICAgICB3aXRoIG9wZW4oInNldHRpbmdzLmpzb24iLCAidyIpYXMgZjoKICAgICAgICAgICAgICAgIGpzb24uZHVtcChzZXR0aW5nLCBmKQogICAgICAgICAgICAgICAgZi5jbG9zZSgpCiAgICAgICAgc2VsZi5zYXZlU2V0dGluZ3ModG9rZW4sIGJlZywgZGlnLCBmaXNoLCBodW50LCBkZXAsIHNlbGwsIGNoYW5uZWxfaWQpCiAgICAgICAgc2VsZi5zYXZlVmFyaWFibGVzKHRva2VuLCBiZWcsIGRpZywgZmlzaCwgaHVudCwgZGVwLCBzZWxsLCBjaGFubmVsX2lkKQogICAgICAgIHJldHVybiBzZXR0aW5nCgogICAgZGVmIHNhdmVWYXJpYWJsZXMoc2VsZiwgX3Rva2VuLCBiZWcsIGRpZywgZmlzaCwgaHVudCwgZGVwLCBzZWxsLCBfY2hhbm5lbF9pZCk6CiAgICAgICAgZ2xvYmFsIHRva2VuLCBpc0JlZywgaXNEaWcsIGlzRmlzaCwgaXNIdW50LCBpc0RlcCwgaXNTZWxsLCBjaGFubmVsX2lkCiAgICAgICAgdG9rZW4gPSBfdG9rZW4KICAgICAgICBpc0JlZyA9IGJlZwogICAgICAgIGlzRGlnID0gZGlnCiAgICAgICAgaXNGaXNoID0gZmlzaAogICAgICAgIGlzSHVudCA9IGh1bnQKICAgICAgICBpc0RlcCA9IGRlcAogICAgICAgIGlzU2VsbCA9IHNlbGwKICAgICAgICBjaGFubmVsX2lkID0gX2NoYW5uZWxfaWQKCiAgICBkZWYgc2F2ZVNldHRpbmdzKHNlbGYsIHRva2VuLCBiZWcsIGRpZywgZmlzaCwgaHVudCwgZGVwLCBzZWxsLCBjaGFubmVsX2lkKToKICAgICAgICBnbG9iYWwgc2V0dGluZ3MKICAgICAgICBzZXR0aW5ncyA9IHsidG9rZW4iOiB0b2tlbiwgImJlZyI6IGJlZywgImRpZyI6IGRpZywgImZpc2giOiBmaXNoLCAiaHVudCI6IGh1bnQsICJkZXAiOiBkZXAsICJzZWxsIjogc2VsbCwiY2hhbm5lbF9pZCI6IGNoYW5uZWxfaWR9CgojYXV0b2Zhcm0gZGlzcGxheSBjbGFzcwpjbGFzcyBEaXNwbGF5OgogICAgZGVmIF9faW5pdF9fKHNlbGYpIC0
